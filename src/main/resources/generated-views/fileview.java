import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

import java.io.IOException;

/*
 * Auto generated code to render template /fileview.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class fileview extends com.fizzed.rocker.runtime.DefaultRockerModel {

    // argument @ [1:2]
    private String filename;

    static public com.fizzed.rocker.ContentType getContentType() {
        return com.fizzed.rocker.ContentType.HTML;
    }

    static public String getTemplateName() {
        return "fileview.rocker.html";
    }

    static public String getTemplatePackageName() {
        return "";
    }

    static public String getHeaderHash() {
        return "-79956506";
    }

    static public long getModifiedAt() {
        return 1554633681210L;
    }

    // argument @ [1:2]
    private String content;

    static public String[] getArgumentNames() {
        return new String[]{"content", "filename"};
    }

    public fileview content(String content) {
        this.content = content;
        return this;
    }

    public String content() {
        return this.content;
    }

    static public fileview template(String content, String filename) {
        return new fileview()
                .content(content)
                .filename(filename);
    }

    public fileview filename(String filename) {
        this.filename = filename;
        return this;
    }

    public String filename() {
        return this.filename;
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n
        static private final byte[] PLAIN_TEXT_0_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(fileview.class.getClassLoader(), fileview.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
        }

        // argument @ [1:2]
        protected final String content;
        // argument @ [1:2]
        protected final String filename;

        public Template(fileview model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.content = model.content();
            this.filename = model.filename();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // ValueClosureBegin @ [3:1]
            __internal.aboutToExecutePosInTemplate(3, 1);
            __internal.renderValue(layout.template("File " + filename).__body(() -> {
                // ValueExpression @ [4:1]
                __internal.aboutToExecutePosInTemplate(4, 1);
                __internal.renderValue(content, false);
                // PlainText @ [4:9]
                __internal.aboutToExecutePosInTemplate(4, 9);
                __internal.writeValue(PLAIN_TEXT_0_0);
                // ValueClosureEnd @ [3:1]
                __internal.aboutToExecutePosInTemplate(3, 1);
            }), false); // value closure end @ [3:1]
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n";

    }

}
